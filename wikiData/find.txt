For other uses, see Find (disambiguation).      This article does not cite any references or sources. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (September 2013)   In Unix-like and some other operating systems, find is a command-line utility that searches through one or more directory trees of a file system, locates files based on some user-specified criteria and applies a user-specified action on each matched file. The possible search criteria include a pattern to match against the file name or a time range to match against the modification time or access time of the file. By default, find returns a list of all files below the current working directory. The related locate programs use a database of indexed files obtained through find (updated at regular intervals, typically by cron job) to provide a faster method of searching the entire filesystem for files by name.    Contents   1 History 2 Find syntax 3 POSIX protection from infinite output 4 Operators 5 Type filter explanation 6 Examples  6.1 From current directory 6.2 Files only 6.3 Commands 6.4 Search all directories 6.5 Search all but one directory subtree 6.6 Specify a directory 6.7 Search several directories 6.8 Ignore errors 6.9 Find any one of differently named files 6.10 Execute an action 6.11 Delete files and directories 6.12 Search for a string 6.13 Search for all files owned by a user 6.14 Search in case insensitive mode 6.15 Search files by size 6.16 Search files by name and size   7 Related utilities 8 See also 9 References 10 External links    History[edit] find appeared in Version 5 Unix as part of the Programmer's Workbench project.[1] Find syntax[edit]    This section requires expansion. (August 2008)   find [-H] [-L] [-P] path... [expression] The three options control how the find command should treat symbolic links. The default behaviour is never to follow symbolic links. This can be explicitly specified using the -P flag. The -L flag will cause the find command to follow symbolic links. The -H flag will only follow symbolic links while processing the command line arguments. These flags are not available with some older versions of find. At least one path must precede the expression. find is capable of interpreting wildcards internally and commands must be constructed carefully in order to control shell globbing. Expression elements are whitespace-separated and evaluated from left to right. They can contain logical elements such as AND (‑and or ‑a) and OR (‑or ‑o) as well as more complex predicates. The GNU find has a large number of additional features not specified by POSIX. POSIX protection from infinite output[edit] Real-world filesystems often contain looped structures created through the use of hard or soft links. The POSIX standard requires that  The find utility shall detect infinite loops; that is, entering a previously visited directory that is an ancestor of the last file encountered. When it detects an infinite loop, find shall write a diagnostic message to standard error and shall either recover its position in the hierarchy or terminate.   Operators[edit] Operators can be used to enhance the expressions of the find command. Operators are listed in order of decreasing precedence:  ( expr ) Force precedence. ! expr True if expr is false. expr1 expr2 And (implied); expr2 is not evaluated if expr1 is false. expr1 -a expr2 Same as expr1 expr2. expr1 -o expr2 Or; expr2 is not evaluated if expr1 is true.   find . -name 'fileA_*' -o -name 'fileB_*'  This command searches files whose name has a prefix of "fileA_" or "fileB_" in the current directory.  find . -name 'foo.cpp' '!' -path '.svn'  This command searches for files with the name "foo.cpp" in all subdirectories of the current directory (current directory itself included) other than ".svn". We quote the ! so that it's not interpreted by the shell as the history substitution character. Type filter explanation[edit] -type option used to specify search for only file, link or directory. Various type filters are supported by find. They are activated using the  find -type c  configuration switch where c may be any of:  b block (buffered) special c character (unbuffered special) d directory p named pipe (FIFO) f regular file l symbolic link; this is never true if the -L option or the -follow option is in effect, unless the symbolic link is broken. If you want to search for symbolic links when -L is in effect, use -xtype (though that is a GNU extension). s socket D door (Solaris)  The configuration switches listed in bold are most commonly used. Examples[edit] From current directory[edit]  find . -name 'my*'  This searches in the current directory (represented by the dot character) and below it, for files and directories with names starting with my. The quotes avoid the shell expansion — without them the shell would replace my* with the list of files whose names begin with my in the current directory. In newer versions of the program, the directory may be omitted, and it will imply the current directory. Files only[edit]  find . -name 'my*' -type f  This limits the results of the above search to only regular files, therefore excluding directories, special files, pipes, symbolic links, etc. my* is enclosed in single quotes (apostrophes) as otherwise the shell would replace it with the list of files in the current directory starting with my...... Commands[edit] The previous examples created listings of results because, by default, find executes the '-print' action. (Note that early versions of the find command had no default action at all; therefore the resulting list of files would be discarded, to the bewilderment of users.)  find . -name 'my*' -type f -ls  This prints extended file information. Search all directories[edit]  find / -name myfile -type f -print  This searches every file on the computer for a file with the name myfile and prints it to the screen. It is generally not a good idea to look for data files this way. This can take a considerable amount of time, so it is best to specify the directory more precisely. Some operating systems may mount dynamic filesystems that are not congenial to find. More complex filenames including characters special to the shell may need to be enclosed in single quotes. Search all but one directory subtree[edit]  find / -path excluded_path -prune -o -type f -name myfile -print  This searches every folder on the computer except the subtree excluded_path (full path including the leading /), for a file with the name myfile. It will not detect directories, devices, links, doors, or other "special" filetypes. Specify a directory[edit]  find /home/weedly -name 'myfile' -type f -print  This searches for files named myfile in the /home/weedly directory, the home directory for userid weedly. You should always specify the directory to the deepest level you can remember. The quotes are optional in this example because "myfile" contains no characters special to the shell. Search several directories[edit]  find local /tmp -name mydir -type d -print  This searches for directories named mydir in the local subdirectory of the current working directory and the /tmp directory. Ignore errors[edit] If you're doing this as a user other than root, you might want to ignore permission denied (and any other) errors. Since errors are printed to stderr, they can be suppressed by redirecting the output to /dev/null. The following example shows how to do this in the bash shell:     find / -name 'myfile' -type f -print 2>/dev/null   If you are a csh or tcsh user, you cannot redirect stderr without redirecting stdout as well. You can use sh to run the find command to get around this:     sh -c find / -name 'myfile' -type f -print 2>/dev/null   An alternate method when using csh or tcsh is to pipe the output from stdout and stderr into a grep command. This example shows how to suppress lines that contain permission denied errors.     find . -name 'myfile' |& grep -v 'Permission denied'   Find any one of differently named files[edit]  find . \( -name '*jsp' -o -name '*java' \) -type f -ls  The -ls option prints extended information, and the example finds any file whose name ends with either 'jsp' or 'java'. Note that the parentheses are required. Also note that the operator "or" can be abbreviated as "o". The "and" operator is assumed where no operator is given. In many shells the parentheses must be escaped with a backslash, "\(" and "\)", to prevent them from being interpreted as special shell characters. The -ls option and the -or operator are not available on all versions of find. Execute an action[edit]     find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \;   This command changes the permissions of all files with a name ending in .mp3 in the directory /var/ftp/mp3. The action is carried out by specifying the option -exec chmod 644 {} \; in the command. For every file whose name ends in .mp3, the command chmod 644 {} is executed replacing {} with the name of the file. The semicolon (backslashed to avoid the shell interpreting it as a command separator) indicates the end of the command. Permission 644, usually shown as rw-r--r--, gives the file owner full permission to read and write the file, while other users have read-only access. In some shells, the {} must be quoted. The trailing ";" is customarily quoted with a leading "\", but could just as effectively be enclosed in single quotes. Note that the command itself should *not* be quoted; otherwise you get error messages like     find: echo "mv ./3bfn rel071204": No such file or directory   which means that find is trying to run a file called 'echo "mv ./3bfn rel071204"' and failing. If you will be executing over many results, it is more efficient to use a variant of the exec primary that collects filenames up to ARG_MAX and then executes COMMAND with a list of filenames.  find . -exec COMMAND {} +  This will ensure that filenames with whitespaces are passed to the executed COMMAND without being split up by the shell. Delete files and directories[edit] Caveats: the -delete action is a GNU extension, and using it turns on -depth. So, if you are testing a find command with -print instead of -delete in order to figure out what will happen before going for it, you need to use -depth -print. Delete empty files and directories and print the names (note that -empty is a vendor unique extension from GNU find that may not be available in all find implementations)  find /foo -empty -delete -print  Delete empty files  find /foo -type f -empty -delete  Delete empty directories  find /foo -type d -empty -delete  Delete files and directories (if empty) named bad  find /foo -name bad -empty -delete  Warning: -delete should be used with other operators such as -empty or -name.  find /foo -delete  # this deletes all in /foo  Search for a string[edit] This command will search for a string in all files from the /tmp directory and below:     $ find /tmp -type f -exec grep 'search string' '{}' /dev/null \+   The /dev/null argument is used to show the name of the file before the text that is found. Without it, only the text found is printed. An equivalent mechanism is to use the "-H" or "--with-filename" option to grep:     $ find /tmp -type f -exec grep -H 'search string' '{}' '+'   GNU grep can be used on its own to perform this task:  $ grep -r 'search string' /tmp  Example of search for "LOG" in jsmith's home directory     $ find ~jsmith -exec grep LOG '{}' /dev/null \; -print /home/jsmith/scripts/errpt.sh:cp $LOG $FIXEDLOGNAME  /home/jsmith/scripts/errpt.sh:cat $LOG  /home/jsmith/scripts/title:USER=$LOGNAME   Example of search for the string "ERROR" in all XML files in the current directory and all sub-directories     $ find . -name "*.xml" -exec grep "ERROR" /dev/null '{}' \+   The double quotes (" ") surrounding the search string and single quotes (' ') surrounding the braces are optional in this example, but needed to allow spaces and some other special characters in the string. Note with more complex text (notably in most popular shells descended from `sh` and `csh`) single quotes are often the easier choice, since double quotes do not prevent all special interpretation. Quoting filenames which have English contractions demonstrates how this can get rather complicated, since a string with an apostrophe in it is easier to protect with double quotes. Example:     $ find . -name "file-containing-can't" -exec grep "can't" '{}' \; -print   Search for all files owned by a user[edit]  find . -user <userid>  Search in case insensitive mode[edit] Note that -iname is not in the standard and may not be supported by all implementations.  find . -iname 'MyFile*'  If the -iname switch is not supported on your system then workaround techniques may be possible such as:  find . -name '[mM][yY][fF][iI][lL][eE]*'  This uses Perl to build the above command for you (though in general this kind of usage is dangerous, since special characters are not properly quoted before being fed into the standard input of `sh`):  echo "'MyFile*'" |perl -pe 's/([a-zA-Z])/[\L\1\U\1]/g;s/(.*)/find . -name \1/'|sh  Search files by size[edit] Example of searching files with size between 100 kilobytes and 500 kilobytes.  find . -size +100k -a -size -500k  Example of searching empty files.  find . -size 0k  Example of searching non-empty files.  find . ! -size 0k  Search files by name and size[edit]  find /usr/src ! \( -name '*,v' -o -name '.*,v' \) '{}' \; -print  This command will search in the /usr/src directory and all sub directories. All files that are of the form '*,v' and '.*,v' are excluded. Important arguments to note are in the tooltip that is displayed on mouse-over.  for file in `find /opt \( -name error_log -o -name 'access_log' -o -name 'ssl_engine_log' -o -name 'rewrite_log' -o  -name 'catalina.out' \) -size +300000k -a -size -5000000k`; do     cat /dev/null > $file done  The units should be one of [bckw], 'b' means 512-byte blocks, 'c' means byte, 'k' means kilobytes and 'w' means 2-byte words. The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated. Related utilities[edit]  locate is a Unix search tool that searches through a prebuilt database of files instead of directory trees of a file system. This is faster than find but less accurate because the database may not be up-to-date. grep is a command-line utility for searching plain-text data sets for lines matching a regular expression and by default reporting matching lines on standard output. tree is a command-line utility that recursively lists files found in a directory tree, indenting the file names according to their position in the file hierarchy. GNU Find Utilities (also known as findutils) is a GNU package which contains implementations of the tools find and xargs. BusyBox is a utility that provides several stripped-down Unix tools in a single executable file, intended for embedded operating systems with very limited resources. It also provides a version of find. dir has the /s option that recursively searches for files or folders.  See also[edit]  mdfind, a similar utility that utilizes metadata for Mac OS X and Darwin List of Unix programs List of DOS commands List of duplicate file finders Filter (higher-order function) find (command), a DOS and Windows command that is very different from UNIX find  References[edit]   ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. 139.    External links[edit]  find: find files – Commands & Utilities Reference, The Single UNIX® Specification, Issue 7 from The Open Group Official webpage for GNU find          v t e   Unix command-line interface programs and shell builtins       File system    cat cd chmod chown chgrp cksum cmp cp dd du df file fsck fuser ln ls mkdir mount mv pax pwd rm rmdir size split tee touch type umask         Processes    at bg chroot cron fg kill killall nice pgrep pkill ps pstree time top         User environment    clear env exit finger history id logname mesg passwd su sudo uptime talk tput uname w wall who whoami write         Text processing    awk banner basename comm csplit cut diff dirname ed ex fmt fold head iconv join less more nl paste sed sort spell strings tail tr uniq vi wc xargs         Shell builtins    alias echo expr printf sleep test true and false unset wait yes         Networking    dig host ifconfig inetd netcat netstat nslookup ping rdate rlogin route ssh traceroute         Searching    find grep locate whatis whereis         Documentation    apropos help man         Miscellaneous    bc dc cal lp od          List of Unix utilities              find / -name 'myfile' -type f -print 2>/dev/null      sh -c find / -name 'myfile' -type f -print 2>/dev/null      find . -name 'myfile' |& grep -v 'Permission denied'      find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \;      find: echo "mv ./3bfn rel071204": No such file or directory      $ find /tmp -type f -exec grep 'search string' '{}' /dev/null \+      $ find /tmp -type f -exec grep -H 'search string' '{}' '+'      $ find ~jsmith -exec grep LOG '{}' /dev/null \; -print /home/jsmith/scripts/errpt.sh:cp $LOG $FIXEDLOGNAME  /home/jsmith/scripts/errpt.sh:cat $LOG  /home/jsmith/scripts/title:USER=$LOGNAME      $ find . -name "*.xml" -exec grep "ERROR" /dev/null '{}' \+      $ find . -name "file-containing-can't" -exec grep "can't" '{}' \; -print   for file in `find /opt \( -name error_log -o -name 'access_log' -o -name 'ssl_engine_log' -o -name 'rewrite_log' -o  -name 'catalina.out' \) -size +300000k -a -size -5000000k`; do     cat /dev/null > $file done 